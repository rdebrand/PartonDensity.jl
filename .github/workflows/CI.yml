name: CI

on: 
  push: 
  schedule:
    - cron: "0 7 * * 2"

env:
  JULIA_PKGDIR: "/opt/julia"
  JULIA_DEPOT_PATH: "/opt/myjulia"

jobs:
  build-partondensity-docker-image:
    runs-on: ubuntu-latest
    name: Build PartonDensity Docker image
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
          fetch-depth: 2
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Check if the build is scheduled
      if: github.event_name == 'schedule'
      run: |
         echo "Scheduled" > .github/workflows/todo.txt    
    - name: Build the PartonDensity Docker image
      run: |
         touch todo.txt
         git diff --name-only HEAD HEAD~1 | grep .github/workflows/Dockerfile | head -n 1 >> todo.txt || touch todo.txt
         if [ -s todo.txt ]; then
           cd .github/workflows
           docker build . --tag ghcr.io/cescalara/partondensity.jl:latest
           docker run ghcr.io/cescalara/partondensity.jl:latest
           docker push ghcr.io/cescalara/partondensity.jl
         fi

  test-in-partondensity-docker-image:
    name: Run tests
    runs-on: ubuntu-latest
    needs: build-partondensity-docker-image
    container:
      image: ghcr.io/cescalara/partondensity.jl:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - run: julia --project=. -e 'import Pkg; Pkg.instantiate(); Pkg.add("BAT"); Pkg.test("PartonDensity", coverage=true)'
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v3
        with:
          file: lcov.info

  run-in-partondensity-docker-image:
    name: Run examples
    runs-on: ubuntu-latest
    needs: build-partondensity-docker-image
    container:
            image: ghcr.io/cescalara/partondensity.jl:latest
            credentials:
               username: ${{ github.actor }}
               password: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: ZEUS interface example
      run : julia --project=. -e 'import Pkg; Pkg.instantiate(); include("examples/zeus_interface.jl")'
    - name: Generate pseudodata example
      run : |
         mkdir -p pseudodata
         julia --project=. utils/generatepseudodata.jl -s 42 -p Dirichlet -f 0.5 -c true
         julia --project=. utils/generatepseudodata.jl -s 43 -p Dirichlet -f 1.5 -c true
         ls -lah pseudodata
    - name: Forward model example
      run : |
         julia --project=. -e 'import Pkg; Pkg.instantiate(); include("examples/forward_model.jl")'
    - name: PDF parametrisation example
      run : |
         julia --project=. -e 'import Pkg; Pkg.instantiate(); include("examples/pdf_parametrisation.jl")'
    - name: PDF fit example
      run : |
         ls -lah pseudodata
         mkdir -p fitresults
         julia --project=. utils/PDFfit.jl -s 45 -p  Dirichlet -d simulation-Dirichlet-42  simulation-Dirichlet-43 -n 250 --max_ncycles=0  --nsteps_per_cycle=10 --nsteps_final=10 --strict=false --dummylikelihood=true
    - name: LHAPDF example
      run: |
         ls -lah fitresults
         mkdir -p CABCHSV2023nnlo
         julia --project=. utils/generatelhapdf.jl -s 43 -p Dirichlet -f fit-Dirichlet-0-45-simulation-Dirichlet-42simulation-Dirichlet-43
         
  build-docs-in-partondensity-docker-image:
    name: Build docs in PartonDensity Docker image
    runs-on: ubuntu-latest
    needs: build-partondensity-docker-image
    container:
            image: ghcr.io/cescalara/partondensity.jl:latest
            credentials:
               username: ${{ github.actor }}
               password: ${{ secrets.GITHUB_TOKEN }}    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
          fetch-depth: 2
    - name: Build and deploy docs
      env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # If authenticating with GitHub Actions token
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
          PLOTS_TEST: "true"
          GKSwstype: "100"
          # JULIA_DEBUG: "all"
      run: |
           export JULIA_PKGDIR=/opt/julia
           export JULIA_DEPOT_PATH=/opt/myjulia
           julia --project=docs/ -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate()'
           julia --project=docs/ docs/make.jl

